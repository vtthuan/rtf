<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\NewsBundle\Entity;

use Sonata\NewsBundle\Entity\BasePostRepository;
use Application\Sonata\ClassificationBundle\Entity\Collection;

/**
 * This file has been generated by the EasyExtends bundle ( https://sonata-project.org/bundles/easy-extends )
 *
 * References :
 *   custom repository : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en#querying:custom-repositories
 *   query builder     : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/query-builder/en
 *   dql               : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/dql-doctrine-query-language/en
 *
 * @author <yourname> <youremail>
 */
class PostRepository extends BasePostRepository
{
    public function getActivePostsByCollection(Collection $collection = null, $number = 0)
    {        
        if($number != 0)
        {
            return $this->findBy(array('collection' => $collection, 'enabled' => true), array('viewCount' => 'desc'), $number, 0);  
        }
        else {
            return $this->findBy(array('collection' => $collection, 'enabled' => true), array('viewCount' => 'desc'));  
        }
    }
    
    public function getAllActivePosts() {
        $qb = $this->createQueryBuilder('p');

        return $qb
                ->join('p.collection', 'c')
                ->where($qb->expr()->andX(
                        $qb->expr()->eq('p.enabled', ':enabled'), 
                        $qb->expr()->eq('c.enabled', ':enabled'))
                        )
                ->setParameter(':enabled', true);
    }
    
    public function getRelativePosts(Post $post)
    {
        $collection = $post->getCollection();
        $count = $this->createQueryBuilder('u')
             ->select('COUNT(u)')
             ->getQuery()
             ->getSingleScalarResult();
        
        $query =  $this->createQueryBuilder('u')
                ->where('u.collection = :collection')
		->andWhere('u.id <> :id')
                ->setParameter('collection', $collection->getId())
		->setParameter('id', $post->getId());
        if($count > Post::NUM_ITEMS)
        {
            $query->setFirstResult(rand(0, $count - 1))
            ->setMaxResults(Post::NUM_ITEMS);
        }
        return $query
                ->getQuery()
                ->getResult();
    }
}